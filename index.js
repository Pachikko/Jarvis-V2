// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
if (typeof TELEGRAM_TOKEN === 'undefined') {
  throw new Error('TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Settings -> Variables');
}

const TOKEN = TELEGRAM_TOKEN;
const API = `https://api.telegram.org/bot${TOKEN}`;

const options = {
  accounts: ['10k üí∞', '25k üíº', '50k üí≥', '100k üè¶', '200k üöÄ'],
  risks: ['0.3% üß†', '0.5% üß©', '1% üìà', '2% üî•'],
  pairs: ['EURUSD', 'GBPUSD', 'EURGBP', 'XAUUSD', 'XAGUSD', 'XPTUSD', 'XPDUSD']
};

const sessions = {};

async function sendMessage(chatId, text, keyboard) {
  const body = {
    chat_id: chatId,
    text,
    reply_markup: keyboard ? {
      keyboard: [keyboard.map(opt => ({ text: opt }))],
      resize_keyboard: true,
      one_time_keyboard: true
    } : undefined
  };

  const response = await fetch(`${API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });

  return await response.json();
}

function calculateLot({ account, risk, entry, sl, pair }) {
  const slDistance = Math.abs(entry - sl);
  const riskAmount = account * risk;

  const pairSettings = {
    EURUSD: { pipValue: 10, multiplier: 10 },
    GBPUSD: { pipValue: 10, multiplier: 10 },
    EURGBP: { pipValue: 10, multiplier: 10 },
    XAUUSD: { pipValue: 1, multiplier: 100 },
    XAGUSD: { pipValue: 50, multiplier: 50 },
    XPTUSD: { pipValue: 10, multiplier: 10 },
    XPDUSD: { pipValue: 10, multiplier: 10 }
  };

  const settings = pairSettings[pair];
  if (!settings || slDistance === 0) return null;

  const lot = riskAmount / (slDistance * settings.pipValue * settings.multiplier);
  return parseFloat(lot.toFixed(2));
}

export default {
  async fetch(request) {
    // Health check
    if (request.method === 'GET') {
      return new Response('Jarvis v3 online', { 
        headers: { 'Content-Type': 'text/plain' } 
      });
    }

    // –¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram
    if (request.method !== 'POST') {
      return new Response('Method Not Allowed', { status: 405 });
    }

    try {
      const update = await request.json();
      const message = update.message || update.callback_query?.message;
      
      if (!message || !message.chat) {
        return new Response('Invalid message format', { status: 400 });
      }

      const chatId = message.chat.id;
      const text = message.text?.trim() || '';

      if (!sessions[chatId]) sessions[chatId] = {};
      const session = sessions[chatId];

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
      if (text === '/start' || text === '–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç üîÑ') {
        sessions[chatId] = {};
        await sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, —è Jarvis ü§ñ\n–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –∞–∫–∫–∞—É–Ω—Ç–∞:', options.accounts);
        return new Response('OK');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
      if (!session.account && options.accounts.includes(text)) {
        session.account = parseFloat(text) * 1000;
        await sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∏—Å–∫:', options.risks);
        return new Response('OK');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∏—Å–∫–∞
      if (!session.risk && options.risks.includes(text)) {
        session.risk = parseFloat(text) / 100;
        await sendMessage(chatId, '–í—ã–±–µ—Ä–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:', options.pairs);
        return new Response('OK');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—ã
      if (!session.pair && options.pairs.includes(text)) {
        session.pair = text;
        await sendMessage(chatId, `–í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –¥–ª—è ${text}:`);
        return new Response('OK');
      }

      // –í–≤–æ–¥ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
      if (!session.entry && !isNaN(parseFloat(text))) {
        session.entry = parseFloat(text);
        await sendMessage(chatId, '–í–≤–µ–¥–∏ —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:');
        return new Response('OK');
      }

      // –í–≤–æ–¥ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
      if (!session.sl && !isNaN(parseFloat(text))) {
        session.sl = parseFloat(text);
        await sendMessage(chatId, '–í–≤–µ–¥–∏ —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:');
        return new Response('OK');
      }

      // –í–≤–æ–¥ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –∏ —Ä–∞—Å—á–µ—Ç
      if (!session.tp && !isNaN(parseFloat(text))) {
        session.tp = parseFloat(text);
        const lot = calculateLot(session);
        
        let responseText;
        if (lot) {
          responseText = [
            'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞:',
            `üìå –ü–∞—Ä–∞: ${session.pair}`,
            `üí∞ –õ–æ—Ç: ${lot}`,
            `üî¥ SL: ${session.sl}`,
            `üü¢ TP: ${session.tp}`,
            '',
            '–î–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'
          ].join('\n');
        } else {
          responseText = '‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.';
        }

        sessions[chatId] = {};
        await sendMessage(chatId, responseText, ['–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç üîÑ']);
        return new Response('OK');
      }

      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      await sendMessage(chatId, '–Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ù–∞–∂–º–∏—Ç–µ /start');
      return new Response('OK');

    } catch (error) {
      console.error('Error:', error);
      return new Response('Internal Server Error', { status: 500 });
    }
  }
};
