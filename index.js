if (!TELEGRAM_TOKEN) {
  throw new Error("TELEGRAM_TOKEN is not defined in environment variables");
}
const TOKEN = TELEGRAM_TOKEN; // Cloudflare –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
const API = `https://api.telegram.org/bot${TOKEN}`;

const options = {
  accounts: ['10k üí∞', '25k üíº', '50k üí≥', '100k üè¶', '200k üöÄ'],
  risks: ['0.3% üß†', '0.5% üß©', '1% üìà', '2% üî•'],
  pairs: ['EURUSD', 'GBPUSD', 'EURGBP', 'XAUUSD', 'XAGUSD', 'XPTUSD', 'XPDUSD']
};

const sessions = {};

function reply(chatId, text, keyboard) {
  const body = {
    chat_id: chatId,
    text,
    reply_markup: keyboard ? {
      keyboard: [keyboard.map(opt => ({ text: opt }))],
      resize_keyboard: true,
      one_time_keyboard: true
    } : undefined
  };

  return fetch(`${API}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(body)
  });
}

function calculateLot({ account, risk, entry, sl, pair }) {
  const slDistance = Math.abs(entry - sl);
  const riskAmount = account * risk;

  const settings = {
    EURUSD: { pipValue: 10, multiplier: 10 },
    GBPUSD: { pipValue: 10, multiplier: 10 },
    EURGBP: { pipValue: 10, multiplier: 10 },
    XAUUSD: { pipValue: 1, multiplier: 100 },
    XAGUSD: { pipValue: 50, multiplier: 50 },
    XPTUSD: { pipValue: 10, multiplier: 10 },
    XPDUSD: { pipValue: 10, multiplier: 10 }
  };

  const conf = settings[pair];
  if (!conf || slDistance === 0) return null;

  return +(riskAmount / (slDistance * conf.pipValue * conf.multiplier)).toFixed(2);
}

export default {
  async fetch(request) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ GET –¥–ª—è health check
    if (request.method === 'GET') {
      return new Response('Jarvis v3 online');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ POST –¥–ª—è Telegram webhook
    if (request.method !== 'POST') {
      return new Response('Only POST requests accepted', { status: 405 });
    }

    try {
      const update = await request.json();
      const message = update.message;
      
      if (!message || !message.chat || !message.text) {
        return new Response('No valid message');
      }

      const chatId = message.chat.id;
      const text = message.text.trim();

      if (!sessions[chatId]) sessions[chatId] = {};
      const state = sessions[chatId];

      if (text === '/start' || text === '–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç üîÑ') {
        sessions[chatId] = {};
        await reply(chatId, '–ü—Ä–∏–≤–µ—Ç, —è Jarvis ü§ñ\n–í—ã–±–µ—Ä–∏ —Å—É–º–º—É –∞–∫–∫–∞—É–Ω—Ç–∞:', options.accounts);
        return new Response('OK');
      }

      if (!state.account && options.accounts.includes(text)) {
        state.account = parseInt(text) * 1000;
        await reply(chatId, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∏—Å–∫:', options.risks);
        return new Response('OK');
      }

      if (!state.risk && options.risks.includes(text)) {
        state.risk = parseFloat(text) / 100;
        await reply(chatId, '–í—ã–±–µ—Ä–∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É:', options.pairs);
        return new Response('OK');
      }

      if (!state.pair && options.pairs.includes(text)) {
        state.pair = text;
        await reply(chatId, `–í–≤–µ–¥–∏ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –¥–ª—è ${text}:`);
        return new Response('OK');
      }

      if (!state.entry && !isNaN(+text)) {
        state.entry = +text;
        await reply(chatId, '–í–≤–µ–¥–∏ —Ü–µ–Ω—É —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:');
        return new Response('OK');
      }

      if (!state.sl && !isNaN(+text)) {
        state.sl = +text;
        await reply(chatId, '–í–≤–µ–¥–∏ —Ü–µ–Ω—É —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞:');
        return new Response('OK');
      }

      if (!state.tp && !isNaN(+text)) {
        state.tp = +text;
        const lot = calculateLot(state);
        const summary = lot
          ? `üìå –ü–∞—Ä–∞: ${state.pair}\nüí∞ –õ–æ—Ç: ${lot}\nüìâ SL: ${state.sl}\nüìà TP: ${state.tp}`
          : '‚ùó –û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—á—ë—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å SL –∏ entry.';

        sessions[chatId] = {};
        await reply(chatId, summary, ['–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç üîÑ']);
        return new Response('OK');
      }

      await reply(chatId, '‚ùì –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /start');
      return new Response('OK');
    } catch (error) {
      return new Response(`Error: ${error.message}`, { status: 500 });
    }
  }
};
